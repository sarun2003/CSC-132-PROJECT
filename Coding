# IMPORT LIBRARIES

import cv2 # THIS LIBRARY IS FOR OBJECT DETECTION
import pyttsx3 # THIS ONE IS FOR TEXT TO SPEECH

import cv2
import pyttsx3

def text_to_speech(text):
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

def detect_objects(frame):
    # Convert the frame to grayscale (makes it easier to distinguish between different colored objects of the same type)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Use a pre-trained Haar Cascade classifier for object detection (WILL NEED TO TRAIN THIS LATER)
    cascade_path = 'haarcascade_keyboard_mouse.xml'
    cascade = cv2.CascadeClassifier(cascade_path)

    # Detect objects in frame
    objects = cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    for (x, y, w, h) in objects:
        # Draw rectangles around detected objects
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

        # Name of the object (customizable. this is also what's read out loud)
        object_name = "Keyboard and Mouse"

        # Speak out the name of the object (using tts. can change message.)
        text_to_speech(object_name)

    return frame



####################################################################################################

def main():
    # Set up webcam
    cap = cv2.VideoCapture(0)

    while True:
        ret, frame = cap.read()

        # Break the loop if issue with webcam
        if not ret:
            break

        # Detect objects in frame
        frame_with_objects = detect_objects(frame)

        # Display frame
        cv2.imshow('Object Detection', frame_with_objects)

        # Exit the loop when Q is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the webcam and close all windows
    cap.release()
    cv2.destroyAllWindows()




if __name__ == "__main__":
    main()
